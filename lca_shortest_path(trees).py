# -*- coding: utf-8 -*-
"""lca-shortest path(trees).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FV8uQPvMfLcs3Qh_gtDBlBubS1GayZfP
"""

class Node:
  def __init__(self,key):
    self.left=None
    self.right=None
    self.val=key
def insert(root,node):
  if(root is None):
    root=node
  else:
    if(root.val<node.val):
      if(root.right is None):
        root.right=node
      else:
        insert(root.right,node)
    else:
      if(root.left is None):
        root.left=node
      else:
        insert(root.left,node)
def preorder(root,key,res):
  
    if(root.val==key or root is None):
      return res
    else:
      res.append(root.val)
      if(root.val>key):
        return preorder(root.left,key,res)
      return preorder(root.right,key,res)
     
r = Node(50) 
insert(r,Node(30)) 
insert(r,Node(20)) 
insert(r,Node(40)) 
insert(r,Node(70)) 
insert(r,Node(60)) 
insert(r,Node(80))
insert(r,Node(110))
insert(r,Node(130))

l1,l2=[],[]
l1=preorder(r,80,l1)
l2=preorder(r,20,l2)
lca=0
for i in range(min(len(l1),len(l2))):
  if(l1[i]!=l2[i]):
    lca=i-1
    break
#print(i)
if(l1[i]==l2[i]):
  lca=i
#print(l1,l2,lca)
dist=(len(l1)-lca)+(len(l2)-lca)
print(dist)